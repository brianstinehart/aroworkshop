I"(<h3 id="create-new-project">Create new project</h3>

<p>Create a new project called “OSToy” in your cluster.</p>

<!-- Begin collapsible container div -->
<div class="collapsible-content-container">
  <!-- Begin collapsible container button -->
  <button class="toggle-collapsible">Toggle</button>
  <!-- Begin collapsible container content div -->
  <div class="collapsible-content">
    <!-- Begin parsedText -->
    
<p>Use the following command</p>

<p><code class="language-plaintext highlighter-rouge">oc new-project ostoy&lt;student#&gt;</code></p>

<p>You should receive the following response</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>oc new-project ostoy&lt;student#&gt;
Now using project <span class="s2">"ostoy&lt;student#&gt;"</span> on server <span class="s2">"https://api.gz49n8jb.westeurope.aroapp.io:6443"</span><span class="nb">.</span>

You can add applications to this project with the <span class="s1">'new-app'</span> command. For example, try:

    oc new-app rails-postgresql-example

to build a new example application <span class="k">in </span>Ruby. Or use kubectl to deploy a simple Kubernetes application:

    kubectl create deployment hello-node <span class="nt">--image</span><span class="o">=</span>k8s.gcr.io/serve_hostname
</code></pre></div></div>

<p>Equivalently, you can also create this new project using the web UI by selecting <strong>Home -&gt; Projects</strong>, then clicking on the <strong>Create Project</strong> button on the right.</p>

<p><img src="media/managedlab/6-ostoy-newproj.png" alt="UI Create Project" /></p>


    <!-- End parsedText -->
  </div>
  <!-- End collapsible container content div -->
</div>
<!-- End collapsible container div -->

<h3 id="download-yaml-configuration">Download YAML configuration</h3>

<p>Download the Kubernetes deployment object yamls from the following locations to jump host to a directory of your choosing - just remember where you placed them for the next step.</p>

<p><code class="language-plaintext highlighter-rouge">wget http://aroworkshop.io/yaml/ostoy-fe-deployment.yaml</code></p>

<p><code class="language-plaintext highlighter-rouge">wget http://aroworkshop.io/yaml/ostoy-microservice-deployment.yaml</code></p>

<!-- Begin collapsible container div -->
<div class="collapsible-content-container">
  <!-- Begin collapsible container button -->
  <button class="toggle-collapsible">Toggle</button>
  <!-- Begin collapsible container content div -->
  <div class="collapsible-content">
    <!-- Begin parsedText -->
    
<p>Feel free to open them up and take a look at what we will be deploying. For simplicity of this lab we have placed all the Kubernetes objects we are deploying in one “all-in-one” yaml file.  Though in reality there are benefits to separating these out into individual yaml files.</p>

<p><a href="/yaml/ostoy-fe-deployment.yaml">ostoy-fe-deployment.yaml</a></p>

<p><a href="/yaml/ostoy-microservice-deployment.yaml">ostoy-microservice-deployment.yaml</a></p>


    <!-- End parsedText -->
  </div>
  <!-- End collapsible container content div -->
</div>
<!-- End collapsible container div -->

<h3 id="deploy-backend-microservice">Deploy backend microservice</h3>

<p>The microservice application serves internal web requests and returns a JSON object containing the current hostname and a randomly generated color string.</p>

<!-- Begin collapsible container div -->
<div class="collapsible-content-container">
  <!-- Begin collapsible container button -->
  <button class="toggle-collapsible">Toggle</button>
  <!-- Begin collapsible container content div -->
  <div class="collapsible-content">
    <!-- Begin parsedText -->
    
<p>In your command line deploy the microservice using the following command:</p>

<p><code class="language-plaintext highlighter-rouge">oc apply -f ostoy-microservice-deployment.yaml</code></p>

<p>You should see the following response:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ oc apply -f ostoy-microservice-deployment.yaml
deployment.apps/ostoy-microservice created
service/ostoy-microservice-svc created
</code></pre></div></div>


    <!-- End parsedText -->
  </div>
  <!-- End collapsible container content div -->
</div>
<!-- End collapsible container div -->

<h3 id="deploy-the-front-end-service">Deploy the front-end service</h3>

<p>The frontend deployment contains the node.js frontend for our application along with a few other Kubernetes objects to illustrate examples.</p>

<!-- Begin collapsible container div -->
<div class="collapsible-content-container">
  <!-- Begin collapsible container button -->
  <button class="toggle-collapsible">Toggle</button>
  <!-- Begin collapsible container content div -->
  <div class="collapsible-content">
    <!-- Begin parsedText -->
    
<p>If you open the <em>ostoy-fe-deployment.yaml</em> you will see we are defining:</p>

<ul>
  <li>Persistent Volume Claim</li>
  <li>Deployment Object</li>
  <li>Service</li>
  <li>Route</li>
  <li>Configmaps</li>
  <li>Secrets</li>
</ul>

<p>In your command line deploy the frontend along with creating all objects mentioned above by entering:</p>

<p><code class="language-plaintext highlighter-rouge">oc apply -f ostoy-fe-deployment.yaml</code></p>

<p>You should see all objects created successfully</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>oc apply <span class="nt">-f</span> ostoy-fe-deployment.yaml
persistentvolumeclaim/ostoy-pvc created
deployment.apps/ostoy-frontend created
service/ostoy-frontend-svc created
route.route.openshift.io/ostoy-route created
configmap/ostoy-configmap-env created
secret/ostoy-secret-env created
configmap/ostoy-configmap-files created
secret/ostoy-secret created
</code></pre></div></div>


    <!-- End parsedText -->
  </div>
  <!-- End collapsible container content div -->
</div>
<!-- End collapsible container div -->

<h3 id="get-route">Get route</h3>

<p>Get the route so that we can access the application via <code class="language-plaintext highlighter-rouge">oc get route</code></p>

<!-- Begin collapsible container div -->
<div class="collapsible-content-container">
  <!-- Begin collapsible container button -->
  <button class="toggle-collapsible">Toggle</button>
  <!-- Begin collapsible container content div -->
  <div class="collapsible-content">
    <!-- Begin parsedText -->
    
<p>You should see the following response:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NAME          HOST/PORT                                                      PATH      SERVICES              PORT      TERMINATION   WILDCARD
ostoy-route   ostoy-route-ostoy01.apps.qv4g35sq.westeurope.aroapp.io                   ostoy-frontend-svc    &lt;all&gt;                   None
</code></pre></div></div>

<p>Copy <code class="language-plaintext highlighter-rouge">ostoy-route-ostoy&lt;student#&gt;.apps.qv4g35sq.westeurope.aroapp.io</code> from the command line and paste it into your browser and press enter.  You should see the homepage of our application.</p>

<p><img src="media/managedlab/10-ostoy-homepage.png" alt="Home Page" /></p>


    <!-- End parsedText -->
  </div>
  <!-- End collapsible container content div -->
</div>
<!-- End collapsible container div -->

:ET